import tensorflow as tf
import numpy as np
from importlib import import_module
from pprint import pprint
from deephyper.model.trainer.tf import BasicTrainer
from deephyper.model.utilities.conversions import action2dict
import deephyper.model.arch as a

def run(param_dict):

    config = param_dict

    load_data = import_module(param_dict['load_data_module_name']).load_data

    # Loading data
    (t_X, t_y), (v_X, v_y) = load_data(dest='MNISTnas')

    config['input_shape'] = list(np.shape(t_X))[1:]

    config[a.data] = { a.train_X: t_X,
                       a.train_Y: t_y,
                       a.valid_X: v_X,
                       a.valid_Y: v_y }

    action = config['arch_seq']
    architecture = action2dict(config, action[0][0])
    print('Training for Architecture : ', end='')
    pprint(architecture)

    # For all the Net generated by the CONTROLLER
    trainer = BasicTrainer(config)

    arch_def = architecture
    global_step = config['global_step']

    # Run the trainer and get the rewards
    reward = trainer.get_rewards(arch_def, global_step)
    result = reward
    #np.random.seed()
    #sleep(np.random.randint(0,3))
    #result = np.random.randint(1, 95) + np.random.random()
    print('OUTPUT: ', result)
    return result
