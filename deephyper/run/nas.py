import os
import signal
import sys
from pprint import pformat
from random import random
from importlib import import_module
import numpy as np
import tensorflow as tf

import time

import deephyper.model.arch as a
from deephyper.model.builder import BasicBuilder
from deephyper.model.trainer import BasicTrainer
from deephyper.model.utilities.conversions import action2dict_v2
from deephyper.search import util
from deephyper.model.utilities.nas_cmdline import create_parser
from deephyper.search.nas.utils import StateSpace

logger = util.conf_logger('deephyper.search.nas')

def run(param_dict):
    logger.debug('Starting...')
    config = param_dict

    # logger.debug(f'[STEP] global_step = {config["global_step"]}')
    # logger.debug(f'[STEP] num worker = {config["num_worker"]}')
    # logger.debug(f'[STEP] step = {config["step"]}')
    logger.debug('[PARAM] Creating StateSpace')
    config['state_space'] = StateSpace(config['state_space'], config['num_layers'])
    logger.debug('[PARAM] StateSpace created')

    logger.debug('[PARAM] Loading data')
    load_data = import_module(param_dict['load_data_module_name']).load_data

    # Loading data
    (t_X, t_y), (v_X, v_y) = load_data(dest='DATA')
    logger.debug('[PARAM] Data loaded')

    config['input_shape'] = list(np.shape(t_X))[1:]

    config[a.data] = { a.train_X: t_X,
                       a.train_Y: t_y,
                       a.valid_X: v_X,
                       a.valid_Y: v_y }

    action = config['arch_seq']
    logger.debug(f'[ACTION] = {action}')
    architecture = config['state_space'].action2dict(config, action)
    logger.debug(f'[ARCHIT] = {pformat(architecture)}')

    # For all the Net generated by the CONTROLLER
    trainer = BasicTrainer(config)

    # Run the trainer and get the rewards
    reward = trainer.get_rewards(architecture)
    logger.debug(f'[REWARD/RESULT] = {reward}')
    result = reward
    # np.random.seed()
    # time.sleep(2)
    # result = np.random.randint(1, 95) + np.random.random()
    print('OUTPUT: ', result)
    return result

if __name__ == '__main__':
    parser = create_parser()
    cmdline_args = parser.parse_args()
    param_dict = cmdline_args.config
    run(param_dict)
