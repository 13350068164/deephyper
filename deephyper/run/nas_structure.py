import os
import signal
import sys
from pprint import pformat
from random import random
from importlib import import_module
import numpy as np
import tensorflow as tf

import time

import deephyper.model.arch as a
from deephyper.search import util
from deephyper.benchmarks.mnistNas.load_data import load_data
from deephyper.benchmarks.mnistNas.problem import Problem

from nas.model.trainer import BasicTrainer
from nas.cell.mlp import create_dense_cell_example
from nas.cell.structure import create_sequential_structure

logger = util.conf_logger('deephyper.search.nas')

def run(param_dict):
    logger.debug('Starting...')
    config = param_dict

    config['create_structure'] = util.load_attr_from(config['create_structure'])
    config['create_cell'] = util.load_attr_from(config['create_cell'])

    logger.debug('[PARAM] Loading data')
    # Loading data
    (t_X, t_y), (v_X, v_y) = load_data(dest='DATA')
    logger.debug('[PARAM] Data loaded')

    config['input_shape'] = list(np.shape(t_X))[1:]

    config[a.data] = { a.train_X: t_X,
                       a.train_Y: t_y,
                       a.valid_X: v_X,
                       a.valid_Y: v_y }

    # config['arch_seq'] = [ 0 for i in range(12)]
    architecture = config['arch_seq']

    # For all the Net generated by the CONTROLLER
    trainer = BasicTrainer(config)

    # Run the trainer and get the rewards
    reward = trainer.get_rewards(architecture)
    logger.debug(f'[REWARD/RESULT] = {reward}')
    result = reward

    print('OUTPUT: ', result)
    return result

if __name__ == '__main__':
    pb = Problem()
    param_dict = pb.space
    run(param_dict)
