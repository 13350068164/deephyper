import os
import signal
import sys
import time
from importlib import import_module
from pprint import pformat
from random import random

import numpy as np
import tensorflow as tf

import deephyper.searches.nas.model.arch as a
from deephyper.benchmarks.candleP1B3Nas.problem import Problem
from deephyper.searches import util
from deephyper.searches.nas.model.trainer_gen import GenTrainer

logger = util.conf_logger('deephyper.searches.nas')

def run(config):
    logger.debug('Starting...')
    assert config.get('input_shape') is not None
    assert config.get('output_shape') is not None

    logger.debug('[PARAM] Loading data')
    # Loading data
    load_data = config['load_data']['func']
    print(config)
    (gen_train, n_train), (gen_valid, n_valid) = load_data(
        **config['load_data']['kwargs']
    )
    logger.debug('[PARAM] Data loaded')

    logger.debug(f'input_shape: {config["input_shape"]}')
    logger.debug(f'output_shape: {config["output_shape"]}')

    config[a.data] = { 'gen_train': gen_train,
                       'n_train': n_train,
                       'gen_valid': gen_valid,
                       'n_valid': n_valid }

    config['arch_seq'] = [float(e) for e in np.random.choice(2, 75)]
    architecture = config['arch_seq']
    print(f'arch_seq: {architecture}')

    # For all the Net generated by the CONTROLLER
    trainer = GenTrainer(config)

    # Run the trainer and get the rewards
    result = trainer.get_rewards(architecture)
    logger.debug(f'[REWARD/RESULT] = {result}')

    print('OUTPUT: ', result)
    return result

if __name__ == '__main__':
    pb = Problem()
    param_dict = pb.space
    run(param_dict)
